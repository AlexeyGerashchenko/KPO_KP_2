version: '3.8'

services:
  api_gateway:
    build:
      context: ..
      dockerfile: deployments/api_gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - file_storing_service
      - file_analysis_service
    environment:
      GIN_MODE: release
      FILE_STORING_SERVICE_ADDR: "file_storing_service:8081"
      FILE_ANALYSIS_SERVICE_ADDR: "file_analysis_service:8082"
    networks:
      - app_network

  file_storing_service:
    build:
      context: ..
      dockerfile: deployments/file_storing_service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      db1:
        condition: service_healthy
    environment:
      GIN_MODE: release
      POSTGRES_USER_DB1: "user1"
      POSTGRES_PASSWORD_DB1: "password1"
      POSTGRES_DB_DB1: "file_storage_db"
      POSTGRES_HOST_DB1: "db1"
      POSTGRES_PORT_DB1: "5432"
      FILE_STORAGE_PATH: "/app/file_storage_1"
    volumes:
      - ./file_storage_1:/app/file_storage_1 # Для сохранения файлов на хосте
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user1 -d file_storage_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  file_analysis_service:
    build:
      context: ..
      dockerfile: deployments/file_analysis_service/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      db2:
        condition: service_healthy
      file_storing_service: # File Analysis Service зависит от File Storing Service
        condition: service_started
    environment:
      GIN_MODE: release
      POSTGRES_USER_DB2: "user2"
      POSTGRES_PASSWORD_DB2: "password2"
      POSTGRES_DB_DB2: "file_analysis_db"
      POSTGRES_HOST_DB2: "db2"
      POSTGRES_PORT_DB2: "5432"
      WORDCLOUD_API_URL: "https://quickchart.io/wordcloud"
      FILE_STORAGE_PATH: "/app/file_storage_2"
      FILE_STORING_SERVICE_ADDR: "http://file_storing_service:8081" # Адрес для обращения к File Storing Service
    volumes:
      - ./file_storage_2:/app/file_storage_2 # Для сохранения облаков слов на хосте
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user2 -d file_analysis_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  db1:
    image: postgres:13-alpine
    ports:
      - "5433:5432" # Маппинг на другой порт хоста, чтобы не конфликтовать с db2, если он будет запущен локально
    environment:
      POSTGRES_USER: "user1"
      POSTGRES_PASSWORD: "password1"
      POSTGRES_DB: "file_storage_db"
    volumes:
      - postgres_data_1:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user1 -d file_storage_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  db2:
    image: postgres:13-alpine
    ports:
      - "5434:5432" # Маппинг на другой порт хоста
    environment:
      POSTGRES_USER: "user2"
      POSTGRES_PASSWORD: "password2"
      POSTGRES_DB: "file_analysis_db"
    volumes:
      - postgres_data_2:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user2 -d file_analysis_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_1:
  postgres_data_2:

networks:
  app_network:
    driver: bridge 